%% ex: ft=erlang ts=4 sw=4 et
%% -*- erlang-indent-level: 4;indent-tabs-mode: nil; fill-column: 92 -*-
%%
[
  {sqeache, [ {listen_port, 6543} ] },
  {sqerl, [

          {db_driver_mod, sqerl_pgsql_client},
          {ip_mode, [ipv4]},
          %% Database connection parameters
          {db_host, "127.0.0.1" },
          {db_port, 5432 },
          {db_user, "epgcache" },
          {db_pass, "epgcache" },
          {db_name, "test1" },
          {idle_check, 5000},
          {column_transforms, []},
          {prepared_statements, {sqeache_data, statements, []}}
         ]
  },
  {pooler, [{pools,
             [[{name, sqerl},
               {max_count,  5},
               {init_count, 3 }, % FUTURE - this will also serve as the min worker count when pruning
               {start_mfa, {sqerl_client, start_link, []}},

               % Everything below is planned as part of a new auto-pruning feature which maintains
               % 'freshness' of pool workers, and does its best to ensure that only
               % TODO - we should measure startup time and factor that into decisions about how many to
               % spin down/spin up and eventually even track usage patterns to predict what we'll need.
               %
               % checkin function to call. This should validate the state of the
               % pool worker, and terminate the worker if it is no longer healthy.  Worker
               % will be replaced according to max/init_count and pruning rules.
               {checkin_mfa, {sqerl_client, checkin}},
               % this reflects the intent of upcoming pooler changes to improve
               {pruning,
                [
                 % FUTURE - enable connection pruning
                 {enabled, true },
                 % future - determines at what threshold of overall pool usage at which to not replace a worker
                 % eg, 0.5 - when pool is at or under 50% utilization, pruned workers will not be replaced, to a
                 % minimum number of workers determined by `init_count`
                 {spindown_threshold, 0.5 },
                 % future - determines at what threshold of overall pool usage at which to pause prune operations
                 % eg, 0.8 - when pool is at or over 80% utilization, workers will not be pruned until it falls below this.
                 % future - determines at what frequency to run prune operations
                 {pause_spindown_threshold, 0.85 },
                 % how often to check for pruning in ms.  Note that we will also continue to check
                 % current vs max size whenever a worker is requested, so even if this is a higher number,
                 % the pool will expand under demand.
                 {interval, 100 },
                 % future - as soon as possible after a worker has been alive for this long,
                 % terminate. It may not be replaced, depending on utilization and spindown thresholds.
                 {max_age, 5000}
                ]
               }

              ]
             ]
            }
           ]
  }
].
